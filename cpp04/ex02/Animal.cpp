#include "Animal.hpp"

//**************************************************************************//
//                              Constructors                                //
//**************************************************************************//

Animal::Animal(): _type("") {
	std::cout << "Animal constructed" << std::endl;}

Animal::Animal( std::string type ): _type(type) {
	std::cout << "Animal " << this->_type << " constructed" << std::endl;}

Animal::Animal(Animal &animal) {
	this->_type = animal._type;}

//**************************************************************************//
//                                 Setters                                  //
//**************************************************************************//

//**************************************************************************//
//                                 Getters                                  //
//**************************************************************************//

std::string	Animal::getType() const {return (this->_type);}

//**************************************************************************//
//                             Member functions                             //
//**************************************************************************//

void	Animal::makeSound() const {
	std::cout << "I'm a speaking animal" << std::endl;}

//**************************************************************************//
//                           Operators overload                             //
//**************************************************************************//

Animal & Animal::operator=(Animal const & rhs) {
	this->_type = rhs._type;
	return (*this);}

//**************************************************************************//
//                               Destructors                                //
//**************************************************************************//

Animal::~Animal() {
	std::cout << "Animal " << this->_type << " destructed" << std::endl;}